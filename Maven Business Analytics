*** NOTE: This project is still ongoing and under construction ***

Data Analysis and Business Intelligence Project | MySQL Workbench

In this project, I will be roleplaying as a a newly hired Database Analyst for Maven Fuzzy Factory, 
an eCommerce start-up, and will be working directly with the CEO, Marketing Director and Website Manager 
to help grow the business and analyze performance along the way 

Screenshots of datasets are available through this link : 

Business Concepts covered :  
Traffic Source Analysis |  Landing Page Performance & Testing |  Channel Portfolio Optimization |  Product Level Website Analysis |  Analyze Repeat Behavior  


The database has 6 tables representing data from March 2012 â€“ May 2015 

	Order_item_refunds 

	Order_items 

	Orders 

	Products 

	Website_pageviews 

	Website_sessions 

Source:  
https://www.udemy.com/course/advanced-sql-mysql-for-analytics-business-intelligence/?src=sac&kw=advance+sql

------------------------------------------ SECTION ONE : ANALYZING TRAFFIC SOURCES --------------------------------------------------

# Assignment 1.1 : Identifying top traffic sources in terms of website sessions, grouped by UTM source, campaign, and referring domain

SELECT
          utm_source,
          utm_campaign,
          http_referer,
          COUNT(DISTINCT website_session_id) AS sessions
FROM 
          website_sessions
WHERE 
          created_at < '2012-04-12'
GROUP BY 
          1, 
          2, 
          3
ORDER BY 4 DESC;


# Assignment 1.2 : Calculate conversion rates from sessions to orders up until 2012-04-14

SELECT
          COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
          COUNT(DISTINCT orders.order_id) AS orders,
          COUNT(DISTINCT orders.order_id) / 
		COUNT(DISTINCT website_sessions.website_session_id) AS session_to_order_conv_rate
FROM 
          website_sessions
LEFT JOIN 
          orders
          ON website_sessions.website_session_id = orders.website_session_id
WHERE 
          website_sessions.created_at < '2012-04-14'
	  AND utm_source = 'gsearch'
	  AND utm_campaign = 'nonbrand';

-- Based on this analysis, Marketing is overspending based on the conversion rate (less than 4%), 
recommend Marketing Director to dial down on search bids, thereby reducing company costs


# Assignment 1.3 : Based on the previous analysis, Marketing bid down on gsearch nonbrand (utm source and campaign) last 2012-04-15.
Pull gsearch nonbrand trended session volume by week to see if these bid changes have caused volume to drop.

SELECT
          MIN(DATE(created_at)) AS week_start_date,
          COUNT(DISTINCT website_session_id) AS sessions
FROM 
          website_sessions
WHERE 
          created_at < '2012-05-10' -- date of receipt of assignment
	  AND utm_source = 'gsearch'
	  AND utm_campaign = 'nonbrand'
GROUP BY 
	  YEAR(created_at),
          WEEK(created_at);

-- UTM source gsearch seems fairly sensitive to bid changes since the number of sessions have dropped.
Moving forward, need to think of ways to make campaigns more efficient to maximize volume while saving costs


# Assignment 1.4 : Bid Optimization for Paid Traffic. Investigate conversion rates from sessions to orders by device type (desktop or mobile)
to determine whether we need to bid up on either

SELECT
	  device_type,
          COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
          COUNT(DISTINCT orders.order_id) AS orders,
          COUNT(DISTINCT orders.order_id) / 
		COUNT(DISTINCT website_sessions.website_session_id) AS session_to_order_conv_rate
FROM 
          website_sessions
LEFT JOIN 
          orders
	  ON website_sessions.website_session_id = orders.website_session_id
WHERE 
          website_sessions.created_at < '2012-05-11'
          AND utm_source = 'gsearch'
          AND utm_campaign = 'nonbrand'
GROUP BY 
          1;

-- Result: desktop sessions have 3.7% conversion rate versus mobile at only 1%
-- Recommend to increase bids on desktop to rank higher in auctions and lead to sales boosts


# Assignment 4.5 : Trending with Granular Segments. Based on the previous analysis, gsearch nonbrand campaigns
were bid up on 2012-05-19. Pull weekly trends for both desktop and mobile to see the impact on volume. 
Use 2012-04-15 until the bid change as the baseline.

SELECT
	  MIN(DATE(created_at)) AS week_start_date,
          COUNT(CASE WHEN device_type = 'desktop' THEN website_session_id ELSE NULL END) AS dtop_sessions,
          COUNT(CASE WHEN device_type = 'mobile' THEN website_session_id ELSE NULL END) AS mob_sessions
FROM 
          website_sessions
WHERE 
          created_at BETWEEN '2012-04-15' AND '2012-06-09'
	  AND utm_source = 'gsearch'
          AND utm_campaign = 'nonbrand'
GROUP BY
	  YEAR(created_at),
          WEEK(created_at);

-- Desktop performance is looking strong due to bid changes based on the previous conversion analysis. 


------------------------------------------ SECTION TWO : ANALYZING WEBSITE PERFORMANCE --------------------------------------------------

# Assignment 2.1 : Finding top website pages. Pull the most viewed website pages ranked by session volume

SELECT
          pageview_url,
          COUNT(DISTINCT website_pageview_id) AS pageviews
FROM 
	  website_pageviews
WHERE 
	  created_at < '2012-06-09'
GROUP BY 
	  pageview_url
ORDER BY 
	  pageviews DESC;

-- The homepage, products page, and Mr. Fuzzy page receive the most traffic


# Assignment 2.2 : Finding top entry pages. Pull all entry or landing pages and rank them on entry volume

-- First, return the first pageview for each website session and transform the query result into a temporary table

CREATE TEMPORARY TABLE entry_pageviews
SELECT
	  website_session_id,
	  MIN(website_pageview_id) AS entry_pageview_id
FROM 
	  website_pageviews
WHERE 
	  created_at < '2012-06-12'
GROUP BY 
	  website_session_id;

-- end of temp table

-- Then query the temporary table to return the landing pages with their session volume 

SELECT
	  pageview_url AS landing_page,
	  COUNT(DISTINCT entry_pageviews.website_session_id) AS sessions_hitting_landing_page
FROM 
	  entry_pageviews
LEFT JOIN 
	  website_pageviews
	  ON entry_pageviews.entry_pageview_id = website_pageviews.website_pageview_id
GROUP BY 
	  pageview_url;

-- It looks like all traffic comes through the /home page at this point in time


# Assignment 2.3 : Calculating Bounce Rates. Pull the bounce rates for traffic landing on the /home page. 
Show sessions, bounced sessions, and the bounce rate.

-- First, create a temporary table grouping website sessions with their first pageviews
CREATE TEMPORARY TABLE first_pgviews
SELECT
	  website_session_id,
	  MIN(website_pageview_id) AS first_pageview_id
FROM 
	  website_pageviews
WHERE 
	  created_at < '2012-06-14'
GROUP BY 
	  website_session_id;
-- end of temp table

-- Second, create a temporary table showing website sessions with the landing page (first pageview)
CREATE TEMPORARY TABLE sessions_w_home_landing_page
SELECT
	  first_pgviews.website_session_id,
	  website_pageviews.pageview_url AS landing_page
FROM 
	  first_pgviews
LEFT JOIN 
	  website_pageviews
	  ON first_pgviews.first_pageview_id = website_pageviews.website_pageview_id
WHERE 
	  pageview_url = '/home';
-- end of temp table

-- Third, create a temporary table with the bounce sessions for the /home page or those website sessions that did
go further than the /home page or stopped at the /home page
CREATE TEMPORARY TABLE bounced_sessions
SELECT
	  sessions_w_home_landing_page.website_session_id,
	  sessions_w_home_landing_page.landing_page,
	  COUNT(website_pageviews.website_pageview_id) AS count_pages_viewed
FROM 
	  sessions_w_home_landing_page
LEFT JOIN 
	  website_pageviews
	  ON sessions_w_home_landing_page.website_session_id = website_pageviews.website_session_id
GROUP BY 
	  sessions_w_home_landing_page.website_session_id,
	  sessions_w_home_landing_page.landing_page
HAVING 
	  COUNT(website_pageviews.website_pageview_id) = 1; -- bounce sessions are those whose pageview count is 1
-- end of temp table

-- Calculate the bounce sessions and bounce rate by left joining the two previous temporary tables
SELECT
	  COUNT(sessions_w_home_landing_page.website_session_id) AS sessions,
	  COUNT(bounced_sessions.website_session_id) AS bounced_sessions,
	  COUNT(bounced_sessions.website_session_id) / 
	  	COUNT(sessions_w_home_landing_page.website_session_id) AS bounce_rate
FROM 
	  sessions_w_home_landing_page
LEFT JOIN 
	  bounced_sessions
	  ON sessions_w_home_landing_page.website_session_id = bounced_sessions.website_session_id;

-- From this analysis, there is a high bounce rate at almost 60% for paid search w/c should be high-quality traffic
-- Note that all sessions so far have the homepage as the landing page and 60% of all sessions end here
-- Keep an eye on bounce rates, which represent a major area of improvement 
-- Help the Website Manager measure and analyze a new page that she thinks will improve performance, 
and analyze the results of an A/B split test against the homepage


# Assignment 2.4 : Analyzing Landing Page Tests. Based on the analysis, a new custom landing page called /lander-1
was run in a 50/50 test against the homepage (/home) for gsearch non-brand traffic. Pull the bounce rates for the 
two groups to evaluate the new page. Just look at the time period where /lander-1 was getting traffic.

-- Finding the first instance of /lander-1 to set the analysis timeframe
SELECT
	  MIN(created_at),
	  MIN(website_pageview_id)
FROM 
	  website_pageviews
WHERE 
	  pageview_url = '/lander-1';

-- created_at = '2012-06-19' OR website_pageview_id = 23504

-- First, create a temporary table connecting website sessions with the first pageview id
CREATE TEMPORARY TABLE first_pageviews
SELECT
	  website_pageviews.website_session_id,
	  MIN(website_pageviews.website_pageview_id) AS min_pageview_id
FROM 
	  website_pageviews
INNER JOIN 
	  website_sessions
	  ON website_sessions.website_session_id = website_pageviews.website_session_id
	  AND website_sessions.created_at < '2012-07-28'
	  AND website_pageviews.website_pageview_id > 23504 -- restriction from the first query
	  AND utm_source = 'gsearch'
	  AND utm_campaign = 'nonbrand'
GROUP BY 
	  website_pageviews.website_session_id;
-- end of temp table

-- Second, create a temporary table connecting website sessions with the /home and /lander-1 as their landing pages
CREATE TEMPORARY TABLE test_sessions_landing_page
SELECT
	  first_pageviews.website_session_id,
	  website_pageviews.pageview_url AS landing_page
FROM 
	  first_pageviews
LEFT JOIN 
	  website_pageviews
	  ON first_pageviews.min_pageview_id = website_pageviews.website_pageview_id
WHERE 
	  website_pageviews.pageview_url IN ('/home', '/lander-1');
-- end of temp table

--  Third, create a temporary table showing the bounce sessions per landing page
CREATE TEMPORARY TABLE nonbrand_bounced_sessions
SELECT
	  test_sessions_landing_page.website_session_id,
	  test_sessions_landing_page.landing_page,
	  COUNT(website_pageviews.website_pageview_id) AS pages_viewed
FROM 
	  test_sessions_landing_page
LEFT JOIN 
	  website_pageviews
	  ON website_pageviews.website_session_id = test_sessions_landing_page.website_session_id
GROUP BY 
	  1, 2
HAVING 
	  COUNT(website_pageviews.website_pageview_id) = 1; -- bounce sessions are those whose pageview count is 1
-- end of temp table

-- Finally, left join previous two tables to show bounce rate comparison between the /home and /lander-1 landing pages
SELECT
	  test_sessions_landing_page.landing_page,
	  COUNT(DISTINCT test_sessions_landing_page.website_session_id) AS total_sessions,
	  COUNT(DISTINCT nonbrand_bounced_sessions.website_session_id) AS bounce_sessions,
	  COUNT(DISTINCT nonbrand_bounced_sessions.website_session_id) / 
		COUNT(test_sessions_landing_page.website_session_id) AS bounce_rate
FROM 
	  test_sessions_landing_page
LEFT JOIN 
	  nonbrand_bounced_sessions
	  ON test_sessions_landing_page.website_session_id = nonbrand_bounced_sessions.website_session_id
GROUP BY 1;

-- The custom lander has a lower bounce rate (53%) vs the homepage (58%)
-- Help the Website Manager confirm that traffic is all running to the new custom lander after campaign updates 
-- Keep an eye on bounce rates and help the team look for other areas to test and optimize


# Assignment 4.5 : Landing Page Trend Analysis. Pull the volume of paid search nonbrand traffic landing on 
/home and /lander-1 trended weekly from 2012-06-01 and 2012-08-31, and pull overall paid search bounce
rate trended weekly as well

-- First, creating a temporary table containing the first pageview per website session for /home and /lander-1
CREATE TEMPORARY TABLE landing_pages
SELECT
	  website_sessions.website_session_id,
	  MIN(website_pageview_id) AS min_pageview
FROM 
	  website_pageviews
INNER JOIN 
	  website_sessions
	  ON website_pageviews.website_session_id = website_sessions.website_session_id
	  AND website_sessions.created_at > '2012-06-01'
	  AND website_sessions.created_at < '2012-08-31'
	  AND utm_source = 'gsearch'
	  AND utm_campaign = 'nonbrand'
WHERE 
	  pageview_url IN ('/home', '/lander-1')
GROUP BY 
	website_sessions.website_session_id;
-- end of temp table

-- Second, create a temporary table finding and limiting only to the landing page sessions showing the page url
CREATE TEMPORARY TABLE landing_page_sessions
SELECT
	  landing_pages.website_session_id,
	  website_pageviews.pageview_url AS landing_page
FROM 
	  landing_pages
LEFT JOIN 
	  website_pageviews
	  ON landing_pages.min_pageview = website_pageviews.website_pageview_id;
-- end of temp table

-- Third, creating a temporary table of the bounce sessions per landing page
CREATE TEMPORARY TABLE bounce_table
SELECT
	  landing_page_sessions.website_session_id,
	  landing_page_sessions.landing_page AS landing_page,
	  COUNT(DISTINCT website_pageviews.website_pageview_id) AS pages_viewed
FROM 
	  landing_page_sessions
LEFT JOIN 
	  website_pageviews
	  ON landing_page_sessions.website_session_id = website_pageviews.website_session_id
GROUP BY
	  landing_page_sessions.website_session_id,
	  landing_page_sessions.landing_page
HAVING 
	  COUNT(DISTINCT website_pageviews.website_pageview_id) = 1; -- bounce sessions are those whose pageview count is 1
-- end of temp table

-- Finally, query and left join the three previous tables to show the total volume for /home and /lander-1 and bounce rates all trended weekly
SELECT
	  MIN(DATE(website_pageviews.created_at)) AS week_start_date,
	  -- COUNT(DISTINCT bounce_table.website_session_id),
	  -- COUNT(DISTINCT landing_page_sessions.website_session_id),
	  COUNT(DISTINCT bounce_table.website_session_id) / 
		COUNT(DISTINCT landing_page_sessions.website_session_id) AS bounce_rate,
	  COUNT(DISTINCT CASE WHEN landing_page_sessions.landing_page = '/home' THEN landing_page_sessions.website_session_id ELSE NULL END) AS home_sessions,
	  COUNT(DISTINCT CASE WHEN landing_page_sessions.landing_page = '/lander-1' THEN landing_page_sessions.website_session_id ELSE NULL END) AS lander_sessions
FROM 
	  landing_page_sessions
LEFT JOIN 
	  bounce_table
	  ON landing_page_sessions.website_session_id = bounce_table.website_session_id
LEFT JOIN 
	  website_pageviews
	  ON landing_page_sessions.website_session_id = website_pageviews.website_session_id
GROUP BY
	  YEARWEEK(website_pageviews.created_at);


--------------------------------------------- SECTION THREE : BUILDING CONVERSION FUNNELS ------------------------------------------------------
